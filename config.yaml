# Optional, if set, /healthz liveness probe and /readyz readiness
# probes will be provided
#health_check: ":8080"
verbose: true
mqtt:
  # Required: The MQTT broker to connect to
  broker: mqtt.example.com
  # Optinal: Port of the MQTT broker
  port: 8883
  # Optional: Username and Password for authenticating with the MQTT Server
  #user: <username>
  #password: <password>
  # Optional: Used to specify ClientID. The default is <hostname>-<pid>
  # client_id: somedevice
  # The Topic paths to subscribe to. Be aware that you have to specify the
  # wildcard. MQTT Exporter can subscribe to several topics, but all of them
  # need to match the device_id_regex and metric_per_topic_regex. There are
  # not different regex per topic. If this is required, an own MQTT Exporter
  # instance is needed.
  topic_paths:
   - shellies/#
   - shelly-ht/#
  # Optional: Regular expression to extract the device ID from the topic
  # path. The default regular expression, assumes that the last "element"
  # of the topic_path is the device id. The regular expression must contain
  # a named capture group with the name deviceid. For example the
  # expression for tasamota based sensors is "tele/(?P<deviceid>.*)/.*".
  # The default is:
  # device_id_regex: "(.*/)?(?P<deviceid>.*)"
  device_id_regex: ".*?/(?P<deviceid>.*?)/.*"
  # Optional: Expect a single metric to be published as the value on an
  # mqtt topic. This regex is used to extract the metric name from the
  # topic. Must contain a named group for `metricname`.
  metric_per_topic_regex: ".*/(?P<metricname>.*)"
  # The MQTT QoS level
  qos: 0
influxdb:
  # machine on which influxdb runs on port 8086:
  server: influxdb.example.com
  # should https be used?
  # tls: true|false
  # Database or bucket or however it will be called in InfluxDB v3...
  database: shellies
  # Optional for InfluxDB v1.x, required for InfluxDB v2.x.
  organization: my-org
  # If a token is required, you can specify it here (but be careful that you
  # don't commit it a public git repo or something similar! Or you can use
  # an environment variable 'INFLUXDB_TOKEN'
  # For InfluxDB v1 this is 'username:password', for InfluxDB v2 the token
  # token: <token>
metrics:
  # The first metrics are for the Shelly Plug S
  - mqtt_name: temperature
    name: temperature
    unit: C
    type: float
  - mqtt_name: power
    name: power
    unit: Watt
    type: float
  - mqtt_name: energy
    name: energy
    unit: Watt/Minute
    type: int
  - mqtt_name: 0
    name: switch
    # Optional: enables mapping between string values to metric values.
    # type is ignored if string_value_mapping is specified
    string_value_mapping:
      map:
        off: 0
        low: 1
        on: 2
      error_value: -1
  - mqtt_name: info.update.has_update
    name: firmware_update
    unit: Boolean
    string_value_mapping:
      map:
        true: 1
        false: 0
      error_value: -1
  - mqtt_name: info.update.old_version
    name: current_firmware_version
    unit: Version
    type: string
  - mqtt_name: info.wifi_sta.ip
    name: ipaddress
    type: string
  # the following metrics are for the Shelly Plus H&T
  - mqtt_name: rpc.params.temperature:0.tC
    name: temperature
    unit: C
    type: float
  - mqtt_name: rpc.params.humidity:0.rh
    name: humidity
    unit: rh
    type: float
  - mqtt_name: rpc.params.devicepower:0.battery.V
    name: battery_voltage
    unit: Volt
    type: float
  - mqtt_name: rpc.params.devicepower:0.battery.percent
    name: battery_voltage
    unit: "%"
    type: float
  - mqtt_name: rpc.params.wifi.sta_ip
    name: ip_address
    type: string
  - mqtt_name: humidity
    name: humidity
    unit: rh
    type: float
  - mqtt_name: battery
    name: battery_voltage
    unit: "%"
    type: int
